
  /*******************************************************************
  * CodelessShoppingCartService.js
  * Generated by Backendless Corp.
  ********************************************************************/
		
   const Utils = {
    isObject : obj => obj === Object(obj),
    isString : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'String',
    isNumber : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Number',
    isBoolean: obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Boolean',
    isDate   : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Date'
  }
  
  Backendless.APIServices.CodelessShoppingCartService = {
    getInstructions() { 
      const args = null
        
      return Backendless.APIServices.invoke('CodelessShoppingCartService', 'getInstructions', args)
    },
  
    getItems(cartName) {   if (typeof cartName !== 'string') {
          throw new Error('Invalid value for argument "cartName". Must be an string object')
        }
        
      const args = cartName
      return Backendless.APIServices.invoke('CodelessShoppingCartService', 'getItems', args)
    },
  
    purchase(cartName) {   if (typeof cartName !== 'string') {
          throw new Error('Invalid value for argument "cartName". Must be an string object')
        }
        
      const args = cartName
      return Backendless.APIServices.invoke('CodelessShoppingCartService', 'purchase', args)
    },
  
    addItem(cartName,item) {   if (typeof cartName !== 'string') {
          throw new Error('Invalid value for argument "cartName". Must be an string object')
        }
          
      if (!Utils.isObject(item)) {
        throw new Error('Invalid value for argument "item". Must be object value')
      }
      
      const args = {
        cartName: cartName,
          item: item
      }
        
      return Backendless.APIServices.invoke('CodelessShoppingCartService', 'addItem', args)
    },
  
    deleteItem(cartName,productName) {   if (typeof cartName !== 'string') {
          throw new Error('Invalid value for argument "cartName". Must be an string object')
        }
          if (typeof productName !== 'string') {
          throw new Error('Invalid value for argument "productName". Must be an string object')
        }
        
      const args = {
        cartName: cartName,
          productName: productName
      }
        
      return Backendless.APIServices.invoke('CodelessShoppingCartService', 'deleteItem', args)
    },
  
    setQuantity(cartName,productName,quantity) {   if (typeof cartName !== 'string') {
          throw new Error('Invalid value for argument "cartName". Must be an string object')
        }
          if (typeof productName !== 'string') {
          throw new Error('Invalid value for argument "productName". Must be an string object')
        }
          if (typeof quantity !== 'number') {
          throw new Error('Invalid value for argument "quantity". Must be an number object')
        }
        
      const args = {
        cartName: cartName,
          productName: productName,
          quantity: quantity
      }
        
      return Backendless.APIServices.invoke('CodelessShoppingCartService', 'setQuantity', args)
    },
  
    Items(cartName,items) {   if (typeof cartName !== 'string') {
          throw new Error('Invalid value for argument "cartName". Must be an string object')
        }
          
      if (!Array.isArray(items)) {
        throw new Error('Invalid value for argument "items". Must be array value')
      }
      
      const args = {
        cartName: cartName,
          items: items
      }
        
      return Backendless.APIServices.invoke('CodelessShoppingCartService', 'Items', args)
    }
  }
  